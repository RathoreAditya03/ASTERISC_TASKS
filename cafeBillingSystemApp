import java.util.*;

class MenuItem {
    private String name;
    private double price;

    public MenuItem(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}

class CafeOrderItem {
    private MenuItem menuItem;
    private int quantity;

    public CafeOrderItem(MenuItem menuItem, int quantity) {
        this.menuItem = menuItem;
        this.quantity = quantity;
    }

    public MenuItem getMenuItem() {
        return menuItem;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}

class CafeMenu {
    private ArrayList<MenuItem> menuItems;

    public CafeMenu() {
        menuItems = new ArrayList<>();
        menuItems.add(new MenuItem("Maggie", 40));
        menuItems.add(new MenuItem("Cold drink", 50));
        menuItems.add(new MenuItem("Samosa", 20));
        menuItems.add(new MenuItem("Pizza", 199));
        // Add more items to the menu if needed
    }

    public ArrayList<MenuItem> getMenuItems() {
        return menuItems;
    }
}

class CafeOrder {
    private ArrayList<CafeOrderItem> orderItems;

    public CafeOrder() {
        orderItems = new ArrayList<>();
    }

    public void addItem(MenuItem menuItem, int quantity) {
        CafeOrderItem orderItem = findOrderItem(menuItem);
        if (orderItem != null) {
            updateOrderItem(orderItem, quantity);
        } else {
            orderItem = new CafeOrderItem(menuItem, quantity);
            orderItems.add(orderItem);
        }
    }

    private CafeOrderItem findOrderItem(MenuItem menuItem) {
        for (CafeOrderItem orderItem : orderItems) {
            if (orderItem.getMenuItem().getName().equals(menuItem.getName())) {
                return orderItem;
            }
        }
        return null;
    }

    private void updateOrderItem(CafeOrderItem orderItem, int quantity) {
        int newQuantity = orderItem.getQuantity() + quantity;
        orderItem.setQuantity(newQuantity);
    }

    public void removeItem(MenuItem menuItem, int quantity) {
        CafeOrderItem orderItem = findOrderItem(menuItem);
        if (orderItem != null) {
            int newQuantity = orderItem.getQuantity() - quantity;
            if (newQuantity <= 0) {
                orderItems.remove(orderItem);
            } else {
                orderItem.setQuantity(newQuantity);
            }
        }
    }

    public ArrayList<CafeOrderItem> getOrderItems() {
        return orderItems;
    }
}

class CafeBillingSystem {
    private CafeMenu cafeMenu;
    private CafeOrder cafeOrder;

    public CafeBillingSystem() {
        cafeMenu = new CafeMenu();
        cafeOrder = new CafeOrder();
    }

    public void displayMenu() {
        System.out.println("\nCafe Menu:");
        ArrayList<MenuItem> menuItems = cafeMenu.getMenuItems();
        for (MenuItem menuItem : menuItems) {
            System.out.println(menuItem.getName() + " - Rs." + menuItem.getPrice());
        }
    }

    public void takeOrder() {
        Scanner scanner = new Scanner(System.in);
        String itemName;
        int quantity;

        while (true) {
            System.out.print("Enter an item (or 'done' to finish): ");
            itemName = scanner.nextLine();
            if (itemName.equalsIgnoreCase("done")) {
                break;
            }

            System.out.print("Enter quantity: ");
            quantity = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            MenuItem menuItem = findMenuItem(itemName);
            if (menuItem != null) {
                cafeOrder.addItem(menuItem, quantity);
            } else {
                System.out.println("Invalid item entered!");
            }
        }
    }

    private MenuItem findMenuItem(String itemName) {
        ArrayList<MenuItem> menuItems = cafeMenu.getMenuItems();
        for (MenuItem menuItem : menuItems) {
            if (menuItem.getName().equalsIgnoreCase(itemName)) {
                return menuItem;
            }
        }
        return null;
    }

    public void viewOrder() {
        System.out.println("\nOrder Details:");
        ArrayList<CafeOrderItem> orderItems = cafeOrder.getOrderItems();
        if (orderItems.isEmpty()) {
            System.out.println("No items in the order.");
        } else {
            for (CafeOrderItem orderItem : orderItems) {
                MenuItem menuItem = orderItem.getMenuItem();
                int quantity = orderItem.getQuantity();
                System.out.println(menuItem.getName() + " - Quantity: " + quantity);
            }
        }
    }

    public void deleteOrder() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the item name to delete from the order: ");
        String itemName = scanner.nextLine();

        MenuItem menuItem = findMenuItem(itemName);
        if (menuItem != null) {
            System.out.print("Enter the quantity to delete: ");
            int quantity = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            cafeOrder.removeItem(menuItem, quantity);
            System.out.println("Item deleted successfully!");
        } else {
            System.out.println("Item not found in the order!");
        }
    }

    public void viewTotalBill() {
        System.out.println("\nBill receipt:");
        ArrayList<CafeOrderItem> orderItems = cafeOrder.getOrderItems();
        double totalAmount = 0;

        for (CafeOrderItem orderItem : orderItems) {
            MenuItem menuItem = orderItem.getMenuItem();
            int quantity = orderItem.getQuantity();
            double price = menuItem.getPrice();
            double itemTotal = price * quantity;
            System.out.println(menuItem.getName() + " - $" + price + " x " + quantity + " = $" + itemTotal);
            totalAmount += itemTotal;
        }

        System.out.println("\nTotal Amount: $" + totalAmount);
    }
}

class cafeBillingSystemApp {
    public static void main(String[] args) {
        CafeBillingSystem cafeBillingSystem = new CafeBillingSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nCafe Billing System");
            System.out.println("1. View Menu");
            System.out.println("2. Give Order");
            System.out.println("3. View Given Order");
            System.out.println("4. Delete Order");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    cafeBillingSystem.displayMenu();
                    break;
                case 2:
                    cafeBillingSystem.takeOrder();
                    break;
                case 3:
                    cafeBillingSystem.viewOrder();
                    break;
                case 4:
                    cafeBillingSystem.deleteOrder();
                    break;
                case 5:
                    cafeBillingSystem.viewTotalBill();
                    System.out.println("\nThank you for using the Cafe Billing System!");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
                    break;
            }
        }
    }
}
